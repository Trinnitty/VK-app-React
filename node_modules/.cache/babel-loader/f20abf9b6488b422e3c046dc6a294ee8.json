{"ast":null,"code":"import _objectSpread from \"E:\\\\react\\\\redux-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL } from \"../actions/UserActions\";\nvar initialState = {\n  name: \"\",\n  error: \"\",\n  // добавили для сохранения текста ошибки\n  isFetching: false // добавили для реакции на статус \"загружаю\" или нет\n\n};\nexport function userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: \"\"\n      });\n\n    case LOGIN_SUCCESS:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        name: action.payload\n      });\n\n    case LOGIN_FAIL:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: action.payload.message\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:\\react\\redux-react\\src\\reducers\\user.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","initialState","name","error","isFetching","userReducer","state","action","type","payload","message"],"mappings":";AAAA,SACEA,aADF,EAEEC,aAFF,EAGEC,UAHF,QAIO,wBAJP;AAMA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAER;AACXC,EAAAA,UAAU,EAAE,KAHO,CAGD;;AAHC,CAArB;AAMA,OAAO,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAL;AACE,+BAAYQ,KAAZ;AAAmBF,QAAAA,UAAU,EAAE,IAA/B;AAAqCD,QAAAA,KAAK,EAAE;AAA5C;;AAEF,SAAKJ,aAAL;AACE,+BAAYO,KAAZ;AAAmBF,QAAAA,UAAU,EAAE,KAA/B;AAAsCF,QAAAA,IAAI,EAAEK,MAAM,CAACE;AAAnD;;AAEF,SAAKT,UAAL;AACE,+BAAYM,KAAZ;AAAmBF,QAAAA,UAAU,EAAE,KAA/B;AAAsCD,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAAP,CAAeC;AAA5D;;AAEF;AACE,aAAOJ,KAAP;AAXJ;AAaD","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL\r\n} from \"../actions/UserActions\";\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  error: \"\", // добавили для сохранения текста ошибки\r\n  isFetching: false // добавили для реакции на статус \"загружаю\" или нет\r\n};\r\n\r\nexport function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return { ...state, isFetching: true, error: \"\" };\r\n\r\n    case LOGIN_SUCCESS:\r\n      return { ...state, isFetching: false, name: action.payload };\r\n\r\n    case LOGIN_FAIL:\r\n      return { ...state, isFetching: false, error: action.payload.message };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}